phase_2(char *input) {
    %rdi = char * input;
    %rsp = %rsp - 0x28;
    %rsi = %rsp;
    rnt_val = read_six_numbers(char * input,%rsp);//根据函数的名字可知需要查看六个数字,这里获取了一个返回值
    根据目前知道的情况是将这个read_six_numbers传入的第二个参数是栈指针向下分配了0x28个地址，但是栈指针在传入函数的时候需要八字节对齐，因此这里应该是传入了0x28=40=8*5个位置
    //通过阅读 read_six_number 汇编代码，可以直到 read_six_number 是把字符串转为6个数字，存储在整数数组中。
    //也就是将输入的字符串通过阅读6个字符

    if(*%rsp==1){
        //goto : 400f30;//栈指针在传入之后被修改了，所以这里必须要要%rsp==1否则就爆炸，回去看函数read_six_numbers如何调整%rsp的
        %rbx = %rsp + 4; //栈的位置
        %rbp = %rsp + 24; //栈的位置
        goto : 400f17; 
    }

    explode_bomb();// 这里需要避开
    goto : 400f30;

    400f17:{
        rnt_val = *(%rbx - 0x4);
        rnt_val = rnt_val + rnt_val;
        if(rnt_val==%rbx){
            goto : 400f25;
        }
        explode_bomb(); // 这里需要避开
    }


    400f25:{
        %rbx = %rbx + 0x4;
        if(%rbp != %rbx){
            goto : 400f17;
        }
        goto : 400f3c;
    }

    400f30:{
        %rbx = %rsp + 4;
        %rbp = %rsp + 24;
        goto : 400f17;
    }

    400f3c:{
        %rsp = %rsp + 0x28;
        return;
    }


}




read_six_numbers(char*input,%rsp){

}