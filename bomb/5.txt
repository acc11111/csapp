input in % rdi

分配32字节的空间

rbx = input // 指向的是地址

rsp + 16 + 8 = 24字节的地方存放的rax的值，也就是保护值

也就是24 - 32字节存放的是保护值，目前还没有进入逻辑

//rsp + 16 17 18 19 20 21 ----- 22 23 24从后面来看，我们需要给这些位置赋值，那么就是将这些位置的
//并且这个题很逆天的就是，他有很多的字符，但是你只能使用前面的几个，否则被截断到16个字符你就难受了
//综合来看就是为"flyers"需要在"maduiersnfotvbylSo you think you can stop the bomb with ctrl-c, do you?"里面找到，然后我们输入的就是后者字符串的索引
//注意我们只能输入字符，不能输入数字，因此这里还涉及到ascii的转换
//索引就是 9 15 14 5 6 7
//那么我们输入的低四位一定是这样的，但是字符是8bits组成
eax = 0;

string_length(input){
    return len

}

if(len != 6){
    bomb(); //因此输入的数据必须是6个长度字符
}else if(len ==6){
    goto 4010d2:{
        eax = 0;
        goto 40108b:{
            //通过0扩展将内存byte移动到long长度的寄存器
            ecx = *(rbx + rax) = *(input + 0) = input[0];
            //也就是上面的一步拿出的是第一个字符ecx = input[0];
            //*(rsp) = cl; //cl就是rcx的long部分，那其实很有意思了，直接就是将这个字符放过去啊
            *(rsp) = input[0];
            //rdx =*rsp;
            rdx = input[0];
            //edx &= 0xf;这里其实就是取低的4位
            edx 取低四位；
            //edx = *(rdx + 0x4024b0)//注意这里的rdx在前面被真实过了，所以就是取低四位的字符作为无符号数来和这个相加；
            edx = *(input[0]取低四位 + 0x4024b0);
            //*(rsp + rax + 16) = rdx的低8位/一个字节;
            *(rsp + 16) = rdx的低8位;也就是一个字符吧我认为
            rax += 1; //这里我有一个预感就是需要循环上面的东西，很明显我们上面简化了一些东西都是因为rax在这里是0；
            if(rax != 6){
                goto 40108b:{};

            }else{
                *(rsp + 22) = 0; //置0模拟停止符号
                esi = $0x40245e;
                rdi = rsp + 16
                //注意这两个参数传入了string_not_equal里面
                eax = strings_not_equal(rsp + 16; 0x40245e);//比较这两个字符串
                if(eax == 0){
                    //检查栈是否被破坏
                    if(栈被破坏就退出){
                        退出；
                    }
                }
            }


        }
    }

}

